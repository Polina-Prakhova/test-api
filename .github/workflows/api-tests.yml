name: Restaurant API Tests

on:
  push:
    branches: [ main, develop, sonnet4-gen-1 ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-updated.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 test --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 test --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check test/
    
    - name: Sort imports with isort
      run: |
        isort --check-only test/
    
    - name: Security check with bandit
      run: |
        bandit -r test/ -f json -o reports/bandit-report.json || true
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run smoke tests
      run: |
        pytest -m "not slow and not integration" \
               --html=reports/smoke-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/smoke-report.json \
               --cov=test \
               --cov-report=xml:reports/coverage-smoke.xml \
               --cov-report=html:reports/coverage-smoke \
               -v
    
    - name: Run validation tests
      run: |
        pytest -m validation \
               --html=reports/validation-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/validation-report.json \
               -v
    
    - name: Run authentication tests
      run: |
        pytest test/test_auth.py \
               --html=reports/auth-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/auth-report.json \
               -v
    
    - name: Run error scenario tests
      run: |
        pytest -m error \
               --html=reports/error-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/error-report.json \
               -v
    
    - name: Run security tests
      run: |
        pytest -m security \
               --html=reports/security-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/security-report.json \
               -v
    
    - name: Run integration tests
      if: matrix.python-version == '3.10'  # Run integration tests only on one Python version
      run: |
        pytest -m integration \
               --html=reports/integration-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/integration-report.json \
               --cov=test \
               --cov-report=xml:reports/coverage-integration.xml \
               --cov-report=html:reports/coverage-integration \
               -v
    
    - name: Run all tests with coverage
      if: matrix.python-version == '3.10'  # Run full coverage only on one Python version
      run: |
        pytest --html=reports/full-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/full-report.json \
               --cov=test \
               --cov-report=xml:reports/coverage.xml \
               --cov-report=html:reports/coverage \
               --cov-report=term-missing \
               --cov-fail-under=70 \
               -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: |
          reports/
          !reports/coverage/
        retention-days: 30
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.10'
      with:
        name: coverage-reports
        path: reports/coverage/
        retention-days: 30
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && matrix.python-version == '3.10'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read test results
          let testResults = '';
          try {
            const reportData = fs.readFileSync('reports/full-report.json', 'utf8');
            const report = JSON.parse(reportData);
            
            testResults = `
          ## üß™ Test Results
          
          - **Total Tests**: ${report.summary.total}
          - **Passed**: ${report.summary.passed} ‚úÖ
          - **Failed**: ${report.summary.failed} ‚ùå
          - **Skipped**: ${report.summary.skipped} ‚è≠Ô∏è
          - **Duration**: ${report.duration}s
          
          ### Test Categories
          - Authentication Tests: ‚úÖ
          - Validation Tests: ‚úÖ
          - Error Scenario Tests: ‚úÖ
          - Security Tests: ‚úÖ
          - Integration Tests: ‚úÖ
          
          [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          } catch (error) {
            testResults = `
          ## üß™ Test Results
          
          Tests completed. Check the [full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          `;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testResults
          });

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-updated.txt
    
    - name: Run performance tests
      run: |
        pytest -m "slow or integration" \
               --html=reports/performance-report.html \
               --self-contained-html \
               --json-report \
               --json-report-file=reports/performance-report.json \
               --benchmark-json=reports/benchmark.json \
               -v
    
    - name: Archive performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: reports/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r test/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [test, performance-test, security-scan]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify on failure
      if: needs.test.result == 'failure'
      run: |
        echo "Tests failed! Check the logs for details."
        # Add notification logic here (Slack, email, etc.)
    
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "All tests passed successfully!"
        # Add notification logic here (Slack, email, etc.)